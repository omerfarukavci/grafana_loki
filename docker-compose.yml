version: "3.7"
networks:
  monitoring:
    driver: bridge
services:
  #========Grafana=============================================
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - 3000:3000
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning/
      #- ./grafana/etc/grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_USER=${grafana_user}
      - GF_SECURITY_ADMIN_PASSWORD=${grafana_pass}
    depends_on:
      - loki
    user: root:root
    
  #========Loki================================================     
  loki:
    image: grafana/loki:2.6.1
    container_name: loki
    user: "0"
    command: 
      - '--config.file=/etc/loki/local-config.yaml'
    ports:
      - 3100:3100
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - ./loki/data:/loki
    
  #========to generate dummy logs==============================
  dummy_log:
    image: chentex/random-logger:latest
    container_name: dummy_log
    networks:
      - monitoring
    restart: unless-stopped
    logging:
      driver: loki
      options:
        loki-url: "http://localhost:3100/loki/api/v1/push"
        loki-external-labels: "job=dummy_container,container_name={{.Name}}"
        loki-pipeline-stages: |
          - regex:
              expression: '(?P<Log_Time>\d{4}\-\d{1,2}\-\d{1,2}T+\d{1,2}:\d{1,2}:\d{1,2}.\d{4}) +(?P<Level>\w+) (?P<Messages>.*)'
          - labels:
              Log_Time:
              Level:
              Messages:
          #- json:
              #expressions:
                #user: 
              #source: extra
    depends_on:
      - loki
      